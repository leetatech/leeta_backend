basePath: /api
definitions:
  APIResponseWithoutToken:
    properties:
      body: {}
    type: object
  Address:
    properties:
      address_type:
        $ref: '#/definitions/models.AddressType'
      city:
        type: string
      closest_landmark:
        type: string
      coordinate:
        $ref: '#/definitions/Coordinates'
      default_delivery_address:
        type: boolean
      full_address:
        type: string
      lga:
        type: string
      state:
        type: string
      verified:
        type: boolean
    type: object
  Admin:
    properties:
      address:
        items:
          $ref: '#/definitions/Address'
        type: array
      department:
        type: string
      dob:
        type: string
      email:
        $ref: '#/definitions/Email'
      first_name:
        type: string
      has_pin:
        type: boolean
      id:
        type: string
      is_blocked:
        type: boolean
      is_blocked_reason:
        type: string
      last_name:
        type: string
      phone:
        $ref: '#/definitions/Phone'
      pin_blocked:
        type: boolean
      role:
        type: string
      status:
        $ref: '#/definitions/models.Statuses'
      status_ts:
        type: integer
      ts:
        type: integer
    type: object
  AdminSignUpRequest:
    properties:
      address:
        $ref: '#/definitions/Address'
      department:
        type: string
      device_id:
        type: string
      dob:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        type: string
    type: object
  CartCheckoutRequest:
    properties:
      cart_id:
        type: string
      delivery_details:
        $ref: '#/definitions/ShippingInfo'
      delivery_fee:
        type: number
      payment_method:
        type: string
      service_fee:
        type: number
      total_fee:
        type: number
    type: object
  CartRefillDetails:
    properties:
      cost:
        type: number
      product_id:
        type: string
      quantity:
        type: integer
      weight:
        type: number
    type: object
  Coordinates:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    type: object
  CreateNewPasswordRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      password:
        type: string
    type: object
  Customer:
    properties:
      address:
        items:
          $ref: '#/definitions/Address'
        type: array
      dob:
        type: string
      email:
        $ref: '#/definitions/Email'
      first_name:
        type: string
      has_pin:
        type: boolean
      id:
        type: string
      is_blocked:
        type: boolean
      is_blocked_reason:
        type: string
      last_name:
        type: string
      phone:
        $ref: '#/definitions/Phone'
      pin_blocked:
        type: boolean
      status:
        $ref: '#/definitions/models.Statuses'
      status_ts:
        type: integer
      ts:
        type: integer
    type: object
  DefaultErrorResponse:
    properties:
      data:
        $ref: '#/definitions/leetError.ErrorResponse'
    type: object
  DefaultResponse:
    properties:
      message:
        type: string
      success:
        type: string
    type: object
  DefaultSigningResponse:
    properties:
      auth_token:
        type: string
      body: {}
    type: object
  EarlyAccess:
    properties:
      email:
        type: string
      ts:
        type: integer
    type: object
  Email:
    properties:
      address:
        type: string
      verified:
        type: boolean
    type: object
  EmailRequestBody:
    properties:
      email:
        type: string
    type: object
  Fee:
    properties:
      cost:
        $ref: '#/definitions/models.Cost'
      fee_type:
        $ref: '#/definitions/models.FeeType'
      id:
        type: string
      lga:
        $ref: '#/definitions/models.LGA'
      product_id:
        type: string
      status:
        $ref: '#/definitions/models.FeesStatuses'
      status_ts:
        type: integer
      ts:
        type: integer
    type: object
  FeeQuotationRequest:
    properties:
      cost:
        $ref: '#/definitions/models.Cost'
      fee_type:
        $ref: '#/definitions/models.FeeType'
      lga:
        $ref: '#/definitions/models.LGA'
      product_id:
        type: string
    type: object
  GetCustomerOrdersRequest:
    properties:
      limit:
        type: integer
      order_status:
        items:
          $ref: '#/definitions/models.OrderStatuses'
        type: array
      page:
        type: integer
    type: object
  GetVendorProductRequest:
    properties:
      limit:
        type: integer
      page:
        type: integer
      product_status:
        items:
          $ref: '#/definitions/models.ProductStatus'
        type: array
      vendor_id:
        type: string
    type: object
  OTPValidationRequest:
    properties:
      code:
        type: string
      target:
        type: string
    type: object
  Order:
    properties:
      customer_id:
        type: string
      delivery_details:
        $ref: '#/definitions/ShippingInfo'
      delivery_fee:
        description: VendorID        string        `json:"vendor_id" bson:"vendor_id"`
          // uncomment vendor id when sure how vendors affects individual orders
        type: number
      id:
        type: string
      orders:
        items:
          $ref: '#/definitions/models.CartItem'
        type: array
      payment_method:
        type: string
      reason:
        type: string
      service_fee:
        type: number
      status_history:
        items:
          $ref: '#/definitions/models.StatusHistory'
        type: array
      status_ts:
        type: integer
      total:
        type: number
      ts:
        type: integer
    type: object
  OrderResponse:
    properties:
      customer:
        $ref: '#/definitions/Admin'
      customer_id:
        type: string
      delivery_fee:
        type: number
      id:
        type: string
      product_details:
        $ref: '#/definitions/Product'
      product_id:
        type: string
      status:
        $ref: '#/definitions/models.OrderStatuses'
      status_ts:
        type: integer
      total:
        type: number
      ts:
        type: integer
      vat:
        type: number
      vendor_id:
        type: string
    type: object
  Phone:
    properties:
      number:
        type: string
      primary:
        type: boolean
      verified:
        type: boolean
    type: object
  Product:
    properties:
      description:
        type: string
      discount:
        type: boolean
      discount_price:
        type: number
      final_price:
        type: number
      id:
        type: string
      images:
        items:
          type: string
        type: array
      name:
        type: string
      original_price:
        type: number
      original_price_and_vat:
        type: number
      parent_category:
        $ref: '#/definitions/models.ProductCategory'
      status:
        $ref: '#/definitions/models.ProductStatus'
      status_ts:
        type: integer
      sub_category:
        $ref: '#/definitions/models.ProductSubCategory'
      ts:
        type: integer
      vat:
        type: number
      vendor_id:
        type: string
      weight:
        type: string
    type: object
  ReceiveGuestRequest:
    properties:
      device_id:
        type: string
      location:
        $ref: '#/definitions/Coordinates'
    required:
    - device_id
    type: object
  ReceiveGuestResponse:
    properties:
      device_id:
        type: string
      session_id:
        type: string
      token:
        type: string
    type: object
  ShippingInfo:
    properties:
      address:
        $ref: '#/definitions/Address'
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  SigningRequest:
    properties:
      device_id:
        type: string
      email:
        type: string
      password:
        type: string
      user_type:
        $ref: '#/definitions/models.UserCategory'
    type: object
  SignupRequest:
    properties:
      device_id:
        type: string
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      user_type:
        $ref: '#/definitions/models.UserCategory'
    type: object
  State:
    properties:
      capital:
        type: string
      id:
        type: string
      lgas:
        items:
          type: string
        type: array
      name:
        type: string
      region:
        type: string
      slogan:
        type: string
      status_ts:
        type: integer
      towns:
        items:
          type: string
        type: array
      ts:
        type: integer
    type: object
  UpdateCartItemQuantityRequest:
    properties:
      cart_item_id:
        type: string
      quantity:
        type: integer
    type: object
  UpdateOrderStatusRequest:
    properties:
      order_id:
        type: string
      order_status:
        $ref: '#/definitions/models.OrderStatuses'
      reason:
        type: string
    type: object
  domain.GasProductRequest:
    properties:
      description:
        type: string
      name:
        type: string
      product_category:
        $ref: '#/definitions/models.ProductCategory'
    type: object
  domain.GetVendorProductsResponse:
    properties:
      has_next_page:
        type: boolean
      products:
        items:
          $ref: '#/definitions/Product'
        type: array
    type: object
  filter.CompareOperator:
    enum:
    - beginsWith
    - doesNotBeginWith
    - contains
    - doesNotContain
    - isNumberEqualTo
    - isEqualTo
    - isIpEqualTo
    - isStringEqualTo
    - isNotEqualTo
    - isNumberNotEqualTo
    - isIpNotEqualTo
    - isStringNotEqualTo
    - isGreaterThan
    - isGreaterThanOrEqualTo
    - isLessThan
    - isLessThanOrEqualTo
    - beforeDate
    - afterDate
    - exists
    type: string
    x-enum-varnames:
    - CompareOperatorBeginsWith
    - CompareOperatorDoesNotBeginWith
    - CompareOperatorContains
    - CompareOperatorDoesNotContain
    - CompareOperatorIsNumberEqualTo
    - CompareOperatorIsEqualTo
    - CompareOperatorIsIpEqualTo
    - CompareOperatorIsStringEqualTo
    - CompareOperatorIsNotEqualTo
    - CompareOperatorIsNumberNotEqualTo
    - CompareOperatorIsIpNotEqualTo
    - CompareOperatorIsStringNotEqualTo
    - CompareOperatorIsGreaterThan
    - CompareOperatorIsGreaterThanOrEqualTo
    - CompareOperatorIsLessThan
    - CompareOperatorIsLessThanOrEqualTo
    - CompareOperatorBeforeDate
    - CompareOperatorAfterDate
    - CompareOperatorExists
  filter.ControlType:
    enum:
    - enum
    - float
    - integer
    - string
    - dateTime
    - uuid
    - autocomplete
    type: string
    x-enum-varnames:
    - ControlTypeEnum
    - ControlTypeFloat
    - ControlTypeInteger
    - ControlTypeString
    - ControlTypeDateTime
    - ControlTypeUuid
    - ControlTypeAutocomplete
  filter.LogicOperator:
    enum:
    - and
    - or
    type: string
    x-enum-varnames:
    - LogicOperatorAnd
    - LogicOperatorOr
  filter.ReadableValue-string:
    properties:
      label:
        description: Label is the human-readable form of the value
        type: string
      value:
        description: Value is the value for the backend
        type: string
    type: object
  filter.Request:
    properties:
      fields:
        items:
          $ref: '#/definitions/filter.RequestField'
        type: array
      operator:
        $ref: '#/definitions/filter.LogicOperator'
    required:
    - operator
    type: object
  filter.RequestField:
    properties:
      keys:
        items:
          type: string
        type: array
      name:
        type: string
      operator:
        $ref: '#/definitions/filter.CompareOperator'
      value:
        description: Value can be a list of values or a value
    required:
    - name
    - operator
    - value
    type: object
  filter.RequestOption:
    properties:
      control:
        $ref: '#/definitions/filter.RequestOptionType'
      multiSelect:
        type: boolean
      name:
        $ref: '#/definitions/filter.ReadableValue-string'
      operators:
        items:
          properties:
            label:
              description: Label is the human-readable form of the value
              type: string
            value:
              allOf:
              - $ref: '#/definitions/filter.CompareOperator'
              description: Value is the value for the backend
          type: object
        type: array
      values:
        items:
          type: string
        type: array
    type: object
  filter.RequestOptionType:
    properties:
      type:
        allOf:
        - $ref: '#/definitions/filter.ControlType'
        enum:
        - string
        - float
        - integer
        - enum
    type: object
  leetError.ErrorCode:
    enum:
    - 1001
    - 1002
    - 1003
    - 1004
    - 1005
    - 1006
    - 1007
    - 1008
    - 1009
    - 1010
    - 1011
    - 1012
    - 1013
    - 1014
    - 1015
    - 1016
    - 1017
    - 1018
    - 1019
    - 1020
    - 1021
    - 1022
    - 1023
    - 1024
    - 1025
    - 1026
    - 1027
    - 1028
    - 1029
    - 1030
    - 1031
    - 1032
    - 1033
    - 1034
    - 1035
    - 1036
    - 1037
    - 1038
    - 1039
    - 1040
    - 1041
    - 1042
    - 1043
    - 1044
    - 1045
    type: integer
    x-enum-comments:
      InvalidRequestError: generic
    x-enum-varnames:
    - DatabaseError
    - DatabaseNoRecordError
    - UnmarshalError
    - MarshalError
    - PasswordValidationError
    - EncryptionError
    - DecryptionError
    - DuplicateUserError
    - UserNotFoundError
    - IdentityNotFoundError
    - UserLockedError
    - CredentialsValidationError
    - TokenGenerationError
    - TokenValidationError
    - UserCategoryError
    - EmailSendingError
    - BusinessCategoryError
    - StatusesError
    - ErrorUnauthorized
    - EmailFormatError
    - ValidEmailHostError
    - ValidLeetaDomainError
    - FormParseError
    - OrderStatusesError
    - ProductCategoryError
    - ProductSubCategoryError
    - ProductStatusError
    - ForgotPasswordError
    - MissingUserNames
    - InvalidUserRoleError
    - InvalidIdentityError
    - InvalidOTPError
    - CartStatusesError
    - AmountPaidError
    - FeesStatusesError
    - InvalidPageRequestError
    - CartItemQuantityError
    - CartItemRequestQuantityError
    - InvalidRequestError
    - InternalError
    - InvalidProductIdError
    - InvalidDeliveryFeeError
    - InvalidServiceFeeError
    - RestrictedAccessError
    - FeesError
  leetError.ErrorResponse:
    properties:
      error_code:
        $ref: '#/definitions/leetError.ErrorCode'
      error_reference:
        type: string
      error_type:
        type: string
      internal_error_message: {}
      message:
        type: string
    type: object
  models.AddressType:
    enum:
    - customer_resident_address
    - delivery_address
    type: string
    x-enum-varnames:
    - CustomerResidentAddress
    - DeliveryAddress
  models.Cart:
    properties:
      cart_items:
        items:
          $ref: '#/definitions/models.CartItem'
        type: array
      customer_id:
        type: string
      id:
        type: string
      status:
        $ref: '#/definitions/models.CartStatuses'
      status_ts:
        type: integer
      total:
        type: number
      ts:
        type: integer
    type: object
  models.CartItem:
    properties:
      cost:
        type: number
      id:
        type: string
      product_category:
        $ref: '#/definitions/models.ProductCategory'
      product_id:
        type: string
      quantity:
        type: integer
      vendor_id:
        type: string
      weight:
        type: number
    type: object
  models.CartStatuses:
    enum:
    - ACTIVE
    - INACTIVE
    type: string
    x-enum-comments:
      CartActive: cart has been created and active
      CartInactive: cart has been inactivated and no longer active due to check out
        or session expiry
    x-enum-varnames:
    - CartActive
    - CartInactive
  models.Cost:
    properties:
      cost_per_kg:
        type: number
      cost_per_qty:
        type: number
      cost_per_type:
        type: number
    type: object
  models.FeeType:
    enum:
    - SERVICE_FEE
    - PRODUCT_FEE
    - DELIVERY_FEE
    type: string
    x-enum-varnames:
    - ServiceFee
    - ProductFee
    - DeliveryFee
  models.FeesStatuses:
    enum:
    - ACTIVE
    - INACTIVE
    type: string
    x-enum-comments:
      FeesActive: fees has been created and active
      FeesInactive: fees has been inactivated
    x-enum-varnames:
    - FeesActive
    - FeesInactive
  models.Guest:
    properties:
      address:
        $ref: '#/definitions/Address'
      default_delivery_address:
        type: boolean
      device_id:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      location:
        $ref: '#/definitions/Coordinates'
      number:
        type: string
    type: object
  models.LGA:
    properties:
      lga:
        type: string
      state:
        type: string
    type: object
  models.OrderStatuses:
    enum:
    - PENDING
    - APPROVED
    - SHIPPED
    - COMPLETED
    - CANCELLED
    - REJECTED
    type: string
    x-enum-comments:
      OrderApproved: '@name APPROVED  // order has been approved'
      OrderCancelled: '@name CANCELLED // order has been cancelled by vendor or customer'
      OrderCompleted: '@name COMPLETED // order has been processed and delivered,
        and verified by the customer'
      OrderPending: '@name PENDING    // order has been created and processing'
      OrderRejected: '@name REJECTED // order was rejected by vendor or customer'
      OrderShipped: '@name SHIPPED  // order has been shipped'
    x-enum-varnames:
    - OrderPending
    - OrderApproved
    - OrderShipped
    - OrderCompleted
    - OrderCancelled
    - OrderRejected
  models.ProductCategory:
    enum:
    - LPG
    - LNG
    type: string
    x-enum-varnames:
    - LPGProductCategory
    - LNGProductCategory
  models.ProductStatus:
    enum:
    - InStock
    - OutOfStock
    type: string
    x-enum-varnames:
    - InStock
    - OutOfStock
  models.ProductSubCategory:
    enum:
    - CYLINDER
    - COOKER
    - ACCESSORIES
    type: string
    x-enum-varnames:
    - CylinderSubCategory
    - CookerSubCategory
    - AccessoriesSubCategory
  models.StatusHistory:
    properties:
      reason:
        type: string
      status:
        $ref: '#/definitions/models.OrderStatuses'
      status_ts:
        type: integer
    type: object
  models.Statuses:
    enum:
    - SIGNEDUP
    - REGISTERED
    - REJECTED
    - EXITED
    - LOCKED
    type: string
    x-enum-comments:
      Exited: no longer exists
      Locked: currently locked for some reason
      Registered: filled the required information
      Rejected: rejected
      SignedUp: just signed up
    x-enum-varnames:
    - SignedUp
    - Registered
    - Rejected
    - Exited
    - Locked
  models.User:
    properties:
      address:
        items:
          $ref: '#/definitions/Address'
        type: array
      dob:
        type: string
      email:
        $ref: '#/definitions/Email'
      first_name:
        type: string
      has_pin:
        type: boolean
      id:
        type: string
      is_blocked:
        type: boolean
      is_blocked_reason:
        type: string
      last_name:
        type: string
      phone:
        $ref: '#/definitions/Phone'
      pin_blocked:
        type: boolean
      status:
        $ref: '#/definitions/models.Statuses'
    type: object
  models.UserCategory:
    enum:
    - vendor
    - customer
    - admin_leeta
    - guest
    type: string
    x-enum-varnames:
    - VendorCategory
    - CustomerCategory
    - AdminCategory
    - GuestCategory
  paging.Request:
    properties:
      index:
        type: integer
      size:
        type: integer
    type: object
  paging.Response:
    properties:
      index:
        type: integer
      size:
        type: integer
      total:
        type: integer
    type: object
  query.Metadata:
    properties:
      filter:
        $ref: '#/definitions/filter.Request'
      paging:
        $ref: '#/definitions/paging.Response'
      sorting:
        $ref: '#/definitions/sorting.Request'
    type: object
  query.ResponseListWithMetadata-Fee:
    properties:
      data:
        items:
          $ref: '#/definitions/Fee'
        type: array
      metadata:
        $ref: '#/definitions/query.Metadata'
    required:
    - data
    - metadata
    type: object
  query.ResponseListWithMetadata-Order:
    properties:
      data:
        items:
          $ref: '#/definitions/Order'
        type: array
      metadata:
        $ref: '#/definitions/query.Metadata'
    required:
    - data
    - metadata
    type: object
  query.ResponseListWithMetadata-Product:
    properties:
      data:
        items:
          $ref: '#/definitions/Product'
        type: array
      metadata:
        $ref: '#/definitions/query.Metadata'
    required:
    - data
    - metadata
    type: object
  query.ResponseWithMetadata-models_Cart:
    properties:
      data:
        $ref: '#/definitions/models.Cart'
      metadata:
        $ref: '#/definitions/query.Metadata'
    required:
    - data
    - metadata
    type: object
  query.ResultSelector:
    properties:
      filter:
        $ref: '#/definitions/filter.Request'
      paging:
        $ref: '#/definitions/paging.Request'
      sorting:
        $ref: '#/definitions/sorting.Request'
    type: object
  sorting.Request:
    properties:
      column:
        type: string
      direction:
        $ref: '#/definitions/sorting.SortDirection'
    type: object
  sorting.SortDirection:
    enum:
    - desc
    - asc
    - ""
    type: string
    x-enum-varnames:
    - DirectionDescending
    - DirectionAscending
    - NoDirection
host: https://leetabackend-e6d948d15ae2.herokuapp.com
info:
  contact:
    email: admin@getlleta.com
    name: LEETA Technologies
  description: LEETA Application backend documentation
  license:
    name: Apache 3.0-or-later
  termsOfService: http://swagger.io/terms/
  title: LEETA BACKEND API
  version: "1.0"
paths:
  /cart:
    put:
      consumes:
      - application/json
      description: The endpoint to get a user cart, and the items in the cart
      parameters:
      - description: list cart request body
        in: body
        name: query.ResultSelector
        required: true
        schema:
          $ref: '#/definitions/query.ResultSelector'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/query.ResponseWithMetadata-models_Cart'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: List cart and items. Use result selector to filter results and manage
        pagination
      tags:
      - Cart
  /cart/{cart_id}:
    delete:
      consumes:
      - application/json
      description: The endpoint is used to delete an item from a cart
      parameters:
      - description: cartID
        in: query
        name: cartID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/DefaultResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Delete item from a cart
      tags:
      - Cart
  /cart/add:
    post:
      consumes:
      - application/json
      description: The endpoint to add items to cart
      parameters:
      - description: add to cart request body
        in: body
        name: domain.CartItem
        required: true
        schema:
          $ref: '#/definitions/CartRefillDetails'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/DefaultResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Add items to cart
      tags:
      - Cart
  /cart/checkout:
    post:
      consumes:
      - application/json
      description: The endpoint to allows the user to check out from the cart
      parameters:
      - description: Cart checkout request body
        in: body
        name: domain.CartCheckoutRequest
        required: true
        schema:
          $ref: '#/definitions/CartCheckoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Check out from cart
      tags:
      - Cart
  /cart/item/{cart_item_id}:
    delete:
      consumes:
      - application/json
      description: The endpoint to delete items from cart. This endpoint also deletes
        an entire cart if there is no item left in the cart
      parameters:
      - description: cart_item_id
        in: query
        name: cart_item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/DefaultResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Delete items from cart
      tags:
      - Cart
  /cart/item/quantity:
    put:
      consumes:
      - application/json
      description: The endpoint to increase or reduce cart item quantity
      parameters:
      - description: update cart item quantity request body
        in: body
        name: domain.UpdateCartItemQuantityRequest
        required: true
        schema:
          $ref: '#/definitions/UpdateCartItemQuantityRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/DefaultResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: increase or reduce cart item quantity
      tags:
      - Cart
  /cart/options:
    get:
      consumes:
      - application/json
      description: Retrieve cart filter options
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/filter.RequestOption'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Get cart filter options
      tags:
      - Cart
  /fees/:
    post:
      consumes:
      - application/json
      description: The endpoint to create fees for gas refill
      parameters:
      - description: create fees request body
        in: body
        name: domain.FeeQuotationRequest
        required: true
        schema:
          $ref: '#/definitions/FeeQuotationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Create fees
      tags:
      - Fees
    put:
      consumes:
      - application/json
      description: The endpoint to get all list fees. Use filter t filter by type
      parameters:
      - description: list fees request body
        in: body
        name: query.ResultSelector
        required: true
        schema:
          $ref: '#/definitions/query.ResultSelector'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/query.ResponseListWithMetadata-Fee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: List fees.
      tags:
      - Fees
  /fees/options:
    get:
      consumes:
      - application/json
      description: Retrieve fees filter options
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/filter.RequestOption'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Get fees filter options
      tags:
      - Fees
  /order/:
    get:
      consumes:
      - application/json
      description: The endpoint takes the order status, pages and limit and then returns
        the requested orders
      parameters:
      - description: get customer orders by status request body
        in: body
        name: domain.GetCustomerOrdersRequest
        required: true
        schema:
          $ref: '#/definitions/GetCustomerOrdersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/OrderResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Get Customer Order By Status
      tags:
      - Order
    put:
      consumes:
      - application/json
      description: The endpoint to list all orders. List endpoint can be configured
        with the filters
      parameters:
      - description: list orders request body
        in: body
        name: query.ResultSelector
        required: true
        schema:
          $ref: '#/definitions/query.ResultSelector'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/query.ResponseListWithMetadata-Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: List orders
      tags:
      - Order
  /order/id/{order_id}:
    get:
      consumes:
      - application/json
      description: The endpoint takes the order id and then returns the requested
        order
      parameters:
      - description: order id
        in: path
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Get Customer Order By id
      tags:
      - Order
  /order/options:
    get:
      consumes:
      - application/json
      description: Retrieve orders filter options
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/filter.RequestOption'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Get orders filter options
      tags:
      - Order
  /order/status:
    put:
      consumes:
      - application/json
      description: The endpoint takes the order update request and updates the status
        of the order
      parameters:
      - description: update order by status request body
        in: body
        name: domain.UpdateOrderStatusRequest
        required: true
        schema:
          $ref: '#/definitions/UpdateOrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Update Order Status
      tags:
      - Order
  /order/status/history/{order_id}:
    get:
      consumes:
      - application/json
      description: The endpoint takes the order id and then returns the requested
        order status history
      parameters:
      - description: order id
        in: path
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.StatusHistory'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Get Order Status History
      tags:
      - Order
  /product/:
    get:
      consumes:
      - application/json
      deprecated: true
      description: The endpoint takes the vendor ID, product status, pages and limit
        and then returns the requested products
      parameters:
      - description: get all vendor products request body
        in: body
        name: domain.GetVendorProductsRequest
        required: true
        schema:
          $ref: '#/definitions/GetVendorProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.GetVendorProductsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Get All Vendor Products By Status
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: The endpoint takes the gas product request and creates a new gas
        product
      parameters:
      - description: create gas product request body
        in: body
        name: domain.GasProductRequest
        required: true
        schema:
          $ref: '#/definitions/domain.GasProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Create Gas Product
      tags:
      - Product
    put:
      consumes:
      - application/json
      description: The endpoint takes in the limit, page and product status and returns
        the requested products
      parameters:
      - description: list products request body
        in: body
        name: query.ResultSelector
        required: true
        schema:
          $ref: '#/definitions/query.ResultSelector'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/query.ResponseListWithMetadata-Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: List Products
      tags:
      - Product
  /product/create:
    post:
      consumes:
      - multipart/form-data
      deprecated: true
      description: The endpoint takes the product request and creates a new product
      parameters:
      - description: Vendor ID
        in: formData
        name: vendor_id
        required: true
        type: string
      - description: Product parent category
        in: formData
        name: parent_category
        type: string
      - description: Product subcategory
        in: formData
        name: sub_category
        required: true
        type: string
      - description: Product name
        in: formData
        name: name
        required: true
        type: string
      - description: Product weight
        in: formData
        name: weight
        required: true
        type: string
      - description: Product description
        in: formData
        name: description
        required: true
        type: string
      - description: Product Price
        in: formData
        name: original_price
        required: true
        type: string
      - description: Product vat
        in: formData
        name: vat
        required: true
        type: string
      - description: Product vat with original price
        in: formData
        name: original_price_and_vat
        required: true
        type: string
      - description: product discount availability
        in: formData
        name: discount
        required: true
        type: string
      - description: discount price
        in: formData
        name: discount_price
        required: true
        type: string
      - description: product status
        in: formData
        name: status
        required: true
        type: string
      - description: Images of the product
        format: multi
        in: formData
        name: images
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Create Product
      tags:
      - Product
  /product/id/{product_id}:
    get:
      consumes:
      - application/json
      deprecated: true
      description: The endpoint takes the product id and then returns the requested
        product
      parameters:
      - description: product id
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Get Vendor Product By id
      tags:
      - Product
  /product/options:
    get:
      consumes:
      - application/json
      description: Retrieve products filter options
      parameters:
      - description: Authentication header
        example: Bearer lnsjkfbnkjkdjnfjk
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/filter.RequestOption'
            type: array
      summary: Get Product filter options
      tags:
      - Product
  /session/admin/signup:
    post:
      consumes:
      - application/json
      description: The endpoint allows admins to sign up
      parameters:
      - description: admin sign up request body
        in: body
        name: domain.AdminSignUpRequest
        required: true
        schema:
          $ref: '#/definitions/AdminSignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DefaultSigningResponse'
      summary: Admin Sign Up
      tags:
      - Admin
  /session/early_access:
    post:
      consumes:
      - application/json
      description: The endpoint allows users to request for early access
      parameters:
      - description: request early access body
        in: body
        name: models.EarlyAccess
        required: true
        schema:
          $ref: '#/definitions/EarlyAccess'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
      summary: Early Access
      tags:
      - Early Access
  /session/guest:
    post:
      consumes:
      - application/json
      description: The endpoint to allow guests to shop
      parameters:
      - description: receive guest request body
        in: body
        name: domain.ReceiveGuestRequest
        required: true
        schema:
          $ref: '#/definitions/ReceiveGuestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ReceiveGuestResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      summary: Request accept guests
      tags:
      - Guest Management
    put:
      consumes:
      - application/json
      description: The endpoint to update guest record
      parameters:
      - description: update guest request body
        in: body
        name: models.Guest
        required: true
        schema:
          $ref: '#/definitions/models.Guest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
      summary: Update guest record
      tags:
      - Guest Management
  /session/guest/{device_id}:
    get:
      consumes:
      - application/json
      description: The endpoint to get guest record
      parameters:
      - description: device id
        in: path
        name: device_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Guest'
      summary: Get guest record
      tags:
      - Guest Management
  /session/otp/request:
    post:
      consumes:
      - application/json
      description: The endpoint allows client side to request for new OTP for target
      parameters:
      - description: request otp body
        in: body
        name: domain.EmailRequestBody
        required: true
        schema:
          $ref: '#/definitions/EmailRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
      summary: Request for new OTP for target email
      tags:
      - OTP Management
  /session/otp/validate:
    post:
      consumes:
      - application/json
      description: The endpoint allows users to validate OTP
      parameters:
      - description: request otp validation body
        in: body
        name: domain.OTPValidationRequest
        required: true
        schema:
          $ref: '#/definitions/OTPValidationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
      summary: Validate OTP
      tags:
      - OTP Management
  /session/password/create:
    post:
      consumes:
      - application/json
      description: The endpoint allows users to create a new password.
      parameters:
      - description: request reset password body
        in: body
        name: domain.CreateNewPasswordRequest
        required: true
        schema:
          $ref: '#/definitions/CreateNewPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/APIResponseWithoutToken'
      summary: Create Password
      tags:
      - Password Management
  /session/password/forgot:
    post:
      consumes:
      - application/json
      description: The endpoint allows users to request for password reset
      parameters:
      - description: request forgot password body
        in: body
        name: domain.EmailRequestBody
        required: true
        schema:
          $ref: '#/definitions/EmailRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
      summary: Forgot Password
      tags:
      - Password Management
  /session/signin:
    post:
      consumes:
      - application/json
      description: The endpoint allows users, both vendors and customers to sign in
      parameters:
      - description: user sign in request body
        in: body
        name: domain.SigningRequest
        required: true
        schema:
          $ref: '#/definitions/SigningRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DefaultSigningResponse'
      summary: User Sign In
      tags:
      - Authentication
  /session/signup:
    post:
      consumes:
      - application/json
      description: The endpoint allows users, both vendors and customers to sign up
      parameters:
      - description: user sign up request body
        in: body
        name: domain.SignupRequest
        required: true
        schema:
          $ref: '#/definitions/SignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DefaultSigningResponse'
      summary: User Sign Up
      tags:
      - Authentication
  /state:
    get:
      consumes:
      - application/json
      description: The endpoint to get all states and all their LGAs.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/State'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Get all states.
      tags:
      - state
  /state/{name}:
    get:
      consumes:
      - application/json
      description: The endpoint to get a state and all its LGAs.
      parameters:
      - description: name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/State'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Get a state.
      tags:
      - state
  /user/:
    get:
      description: The endpoint to get user record from current user jwt token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Customer'
      security:
      - BearerToken: []
      summary: Get only authenticated user data
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update user data is the endpoint used to make changes to a user
        database record
      parameters:
      - description: update user record
        in: body
        name: models.User
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/DefaultResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Update User data
      tags:
      - User
  /user/admin/vendor:
    post:
      consumes:
      - multipart/form-data
      description: The endpoint allows the admin to add a vendor and their business
      parameters:
      - description: First name of the vendor
        in: formData
        name: first_name
        required: true
        type: string
      - description: Last name of the vendor
        in: formData
        name: last_name
        required: true
        type: string
      - description: Business name of the vendor
        in: formData
        name: business_name
        required: true
        type: string
      - description: CAC number of the vendor
        in: formData
        name: cac
        required: true
        type: string
      - description: Business category of the vendor
        in: formData
        name: business_category
        required: true
        type: string
      - description: Description of the vendor
        in: formData
        name: description
        required: true
        type: string
      - description: Is the primary phone number
        in: formData
        name: primary_phone
        required: true
        type: boolean
      - description: Phone number of the vendor
        in: formData
        name: phone_number
        required: true
        type: string
      - description: State of the vendor
        in: formData
        name: state
        required: true
        type: string
      - description: City of the vendor
        in: formData
        name: city
        required: true
        type: string
      - description: Local Government Area of the vendor
        in: formData
        name: lga
        required: true
        type: string
      - description: Full address of the vendor
        in: formData
        name: full_address
        required: true
        type: string
      - description: Closest landmark to the vendor's location
        in: formData
        name: closest_landmark
        required: true
        type: string
      - description: Latitude of the vendor's location
        in: formData
        name: latitude
        required: true
        type: string
      - description: Longitude of the vendor's location
        in: formData
        name: longitude
        required: true
        type: string
      - description: Image of the vendor
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Admin adds vendor and business
      tags:
      - Admin
  /user/vendor/verification:
    post:
      consumes:
      - multipart/form-data
      description: The endpoint allows the verification process of vendor
      parameters:
      - description: First name of the vendor
        in: formData
        name: first_name
        required: true
        type: string
      - description: Last name of the vendor
        in: formData
        name: last_name
        required: true
        type: string
      - description: Business name of the vendor
        in: formData
        name: business_name
        required: true
        type: string
      - description: CAC number of the vendor
        in: formData
        name: cac
        required: true
        type: string
      - description: Business category of the vendor
        in: formData
        name: business_category
        required: true
        type: string
      - description: Description of the vendor
        in: formData
        name: description
        required: true
        type: string
      - description: Is the primary phone number
        in: formData
        name: primary_phone
        required: true
        type: boolean
      - description: Phone number of the vendor
        in: formData
        name: phone_number
        required: true
        type: string
      - description: State of the vendor
        in: formData
        name: state
        required: true
        type: string
      - description: City of the vendor
        in: formData
        name: city
        required: true
        type: string
      - description: Local Government Area of the vendor
        in: formData
        name: lga
        required: true
        type: string
      - description: Full address of the vendor
        in: formData
        name: full_address
        required: true
        type: string
      - description: Closest landmark to the vendor's location
        in: formData
        name: closest_landmark
        required: true
        type: string
      - description: Latitude of the vendor's location
        in: formData
        name: latitude
        required: true
        type: string
      - description: Longitude of the vendor's location
        in: formData
        name: longitude
        required: true
        type: string
      - description: Image of the vendor
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
      - BearerToken: []
      summary: Vendor Verification
      tags:
      - Vendor
securityDefinitions:
  BearerToken:
    in: header
    name: authorization
    type: apiKey
swagger: "2.0"
