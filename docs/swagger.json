{
    "swagger": "2.0",
    "info": {
        "description": "LEETA Application backend documentation",
        "title": "LEETA BACKEND API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "LEETA Technologies",
            "email": "admin@getlleta.com"
        },
        "license": {
            "name": "Apache 3.0-or-later"
        },
        "version": "1.0"
    },
    "host": "https://leetabackend-e6d948d15ae2.herokuapp.com",
    "basePath": "/api",
    "paths": {
        "/cart/add": {
            "post": {
                "description": "The endpoint to add items to cart",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cart"
                ],
                "summary": "Add items to cart",
                "parameters": [
                    {
                        "description": "add to cart request body",
                        "name": "domain.AddToCartRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddToCartRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            }
        },
        "/cart/inactivate": {
            "put": {
                "description": "The endpoint to request for a cart inactivation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cart"
                ],
                "summary": "Request cart inactivation",
                "parameters": [
                    {
                        "description": "inactivate cart request body",
                        "name": "domain.InactivateCart",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InactivateCart"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            }
        },
        "/fees/": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "The endpoint to get fees for gas refill",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fees"
                ],
                "summary": "Get fees",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "The endpoint to create fees for gas refill",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fees"
                ],
                "summary": "Create fees",
                "parameters": [
                    {
                        "description": "create fees request body",
                        "name": "domain.FeeQuotationRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FeeQuotationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            }
        },
        "/fees/product/{product_id}": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "The endpoint to get fees for gas refill by product ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fees"
                ],
                "summary": "Get fee by product ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "product ID",
                        "name": "product_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            }
        },
        "/gas-refill/": {
            "put": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "This endpoint is used to update the status of a gas refill (Cancel, Accept, Reject or Fulfill) request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gas Refill"
                ],
                "summary": "Update Gas refill request status",
                "parameters": [
                    {
                        "description": "update gas refill by status request body",
                        "name": "domain.UpdateRefillRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateRefillRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "The endpoint to request for a gas refill",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gas Refill"
                ],
                "summary": "Request gas refill",
                "parameters": [
                    {
                        "description": "Gas refill request body",
                        "name": "domain.GasRefillRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GasRefillRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            }
        },
        "/gas-refill/list": {
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "The endpoint takes the order status, pages and limit and then returns the requested orders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gas Refill"
                ],
                "summary": "List all gas refill requests",
                "parameters": [
                    {
                        "description": "get refill by status, use filter for filtering responses (not implemented)",
                        "name": "domain.ListRefillFilter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ListRefillFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DefaultResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            }
        },
        "/gas-refill/{refill_id}": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "This is the endpoint to get the details of a single gas refill by refill-id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gas Refill"
                ],
                "summary": "Gets a single gas refill",
                "parameters": [
                    {
                        "type": "string",
                        "description": "refill id",
                        "name": "refill-id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            }
        },
        "/order/": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "The endpoint takes the order status, pages and limit and then returns the requested orders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Get Customer Order By Status",
                "parameters": [
                    {
                        "description": "get customer orders by status request body",
                        "name": "domain.GetCustomerOrdersRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GetCustomerOrdersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/OrderResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            }
        },
        "/order/id/{order_id}": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "The endpoint takes the order id and then returns the requested order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Get Customer Order By id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "order id",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            }
        },
        "/order/make_order": {
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "The endpoint takes the order request and creates a new order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Create Order",
                "parameters": [
                    {
                        "description": "create order request body",
                        "name": "domain.OrderRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            }
        },
        "/order/status": {
            "put": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "The endpoint takes the order update request and updates the status of the order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Update Order Status",
                "parameters": [
                    {
                        "description": "update order by status request body",
                        "name": "domain.UpdateOrderStatusRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateOrderStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            }
        },
        "/product/": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "The endpoint takes the vendor ID, product status, pages and limit and then returns the requested products",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get All Vendor Products By Status",
                "deprecated": true,
                "parameters": [
                    {
                        "description": "get all vendor products request body",
                        "name": "domain.GetVendorProductsRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GetVendorProductRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.GetVendorProductsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "The endpoint takes the gas product request and creates a new gas product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Create Gas Product",
                "parameters": [
                    {
                        "description": "create gas product request body",
                        "name": "domain.GasProductRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.GasProductRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            }
        },
        "/product/create": {
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "The endpoint takes the product request and creates a new product",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Create Product",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vendor ID",
                        "name": "vendor_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product parent category",
                        "name": "parent_category",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product subcategory",
                        "name": "sub_category",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product weight",
                        "name": "weight",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product description",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product Price",
                        "name": "original_price",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product vat",
                        "name": "vat",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product vat with original price",
                        "name": "original_price_and_vat",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "product discount availability",
                        "name": "discount",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "discount price",
                        "name": "discount_price",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "product status",
                        "name": "status",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "format": "multi",
                        "description": "Images of the product",
                        "name": "images",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            }
        },
        "/product/id/{product_id}": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "The endpoint takes the product id and then returns the requested product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get Vendor Product By id",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "product id",
                        "name": "product_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            }
        },
        "/product/list": {
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "The endpoint takes in the limit, page and product status and returns the requested products",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "List Products",
                "parameters": [
                    {
                        "description": "list products request body",
                        "name": "library.ResultSelector",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/library.ResultSelector"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ListProductsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            }
        },
        "/product/options": {
            "get": {
                "description": "Retrieve products filter options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get Product filter options",
                "parameters": [
                    {
                        "type": "string",
                        "example": "Bearer lnsjkfbnkjkdjnfjk",
                        "description": "Authentication header",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/library.RequestOption"
                            }
                        },
                        "headers": {
                            "api-version": {
                                "type": "string",
                                "description": "API version"
                            }
                        }
                    }
                }
            }
        },
        "/session/admin/signup": {
            "post": {
                "description": "The endpoint allows admins to sign up",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Session"
                ],
                "summary": "Admin Sign Up",
                "parameters": [
                    {
                        "description": "admin sign up request body",
                        "name": "domain.AdminSignUpRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AdminSignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultSigningResponse"
                        }
                    }
                }
            }
        },
        "/session/create_new_password": {
            "post": {
                "description": "The endpoint allows users to create a new password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Session"
                ],
                "summary": "Create Password",
                "parameters": [
                    {
                        "description": "request reset password body",
                        "name": "domain.CreateNewPasswordRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateNewPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/APIResponseWithoutToken"
                        }
                    }
                }
            }
        },
        "/session/early_access": {
            "post": {
                "description": "The endpoint allows users to request for early access",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Early Access"
                ],
                "summary": "Early Access",
                "parameters": [
                    {
                        "description": "request early access body",
                        "name": "models.EarlyAccess",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EarlyAccess"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultResponse"
                        }
                    }
                }
            }
        },
        "/session/forgot_password": {
            "post": {
                "description": "The endpoint allows users to request for password reset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Session"
                ],
                "summary": "Forgot Password",
                "parameters": [
                    {
                        "description": "request forgot password body",
                        "name": "domain.EmailRequestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EmailRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultResponse"
                        }
                    }
                }
            }
        },
        "/session/guest": {
            "post": {
                "description": "The endpoint to allow guests to shop",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Session"
                ],
                "summary": "Request accept guests",
                "parameters": [
                    {
                        "description": "receive guest request body",
                        "name": "domain.ReceiveGuestRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReceiveGuestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReceiveGuestResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            }
        },
        "/session/otp/request": {
            "post": {
                "description": "The endpoint allows client side to request for new OTP for target",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Session"
                ],
                "summary": "Request for new OTP for target email",
                "parameters": [
                    {
                        "description": "request otp body",
                        "name": "domain.EmailRequestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EmailRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultResponse"
                        }
                    }
                }
            }
        },
        "/session/otp/validate": {
            "post": {
                "description": "The endpoint allows users to validate OTP",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Session"
                ],
                "summary": "Validate OTP",
                "parameters": [
                    {
                        "description": "request otp validation body",
                        "name": "domain.OTPValidationRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OTPValidationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultResponse"
                        }
                    }
                }
            }
        },
        "/session/signin": {
            "post": {
                "description": "The endpoint allows users, both vendors and buyers to sign in",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Session"
                ],
                "summary": "User Sign In",
                "parameters": [
                    {
                        "description": "user sign in request body",
                        "name": "domain.SigningRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SigningRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultSigningResponse"
                        }
                    }
                }
            }
        },
        "/session/signup": {
            "post": {
                "description": "The endpoint allows users, both vendors and buyers to sign up",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Session"
                ],
                "summary": "User Sign Up",
                "parameters": [
                    {
                        "description": "user sign up request body",
                        "name": "domain.SignupRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SignupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultSigningResponse"
                        }
                    }
                }
            }
        },
        "/user/admin/vendor": {
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "The endpoint allows the admin to add a vendor and their business",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Admin adds vendor and business",
                "parameters": [
                    {
                        "type": "string",
                        "description": "First name of the vendor",
                        "name": "first_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Last name of the vendor",
                        "name": "last_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Business name of the vendor",
                        "name": "business_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "CAC number of the vendor",
                        "name": "cac",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Business category of the vendor",
                        "name": "business_category",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Description of the vendor",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Is the primary phone number",
                        "name": "primary_phone",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Phone number of the vendor",
                        "name": "phone_number",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "State of the vendor",
                        "name": "state",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "City of the vendor",
                        "name": "city",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Local Government Area of the vendor",
                        "name": "lga",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Full address of the vendor",
                        "name": "full_address",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Closest landmark to the vendor's location",
                        "name": "closest_landmark",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Latitude of the vendor's location",
                        "name": "latitude",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Longitude of the vendor's location",
                        "name": "longitude",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Image of the vendor",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/vendor/verification": {
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "The endpoint allows the verification process of vendor",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vendor"
                ],
                "summary": "Vendor Verification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "First name of the vendor",
                        "name": "first_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Last name of the vendor",
                        "name": "last_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Business name of the vendor",
                        "name": "business_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "CAC number of the vendor",
                        "name": "cac",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Business category of the vendor",
                        "name": "business_category",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Description of the vendor",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Is the primary phone number",
                        "name": "primary_phone",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Phone number of the vendor",
                        "name": "phone_number",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "State of the vendor",
                        "name": "state",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "City of the vendor",
                        "name": "city",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Local Government Area of the vendor",
                        "name": "lga",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Full address of the vendor",
                        "name": "full_address",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Closest landmark to the vendor's location",
                        "name": "closest_landmark",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Latitude of the vendor's location",
                        "name": "latitude",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Longitude of the vendor's location",
                        "name": "longitude",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Image of the vendor",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DefaultErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "APIResponseWithoutToken": {
            "type": "object",
            "properties": {
                "body": {}
            }
        },
        "AddToCartRequest": {
            "type": "object",
            "properties": {
                "cart_details": {
                    "$ref": "#/definitions/CartRefillDetails"
                },
                "guest": {
                    "type": "boolean"
                }
            }
        },
        "Address": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "closest_landmark": {
                    "type": "string"
                },
                "coordinate": {
                    "$ref": "#/definitions/Coordinates"
                },
                "full_address": {
                    "type": "string"
                },
                "lga": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                }
            }
        },
        "Admin": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "department": {
                    "type": "string"
                },
                "dob": {
                    "type": "string"
                },
                "email": {
                    "$ref": "#/definitions/Email"
                },
                "first_name": {
                    "type": "string"
                },
                "has_pin": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "is_blocked": {
                    "type": "boolean"
                },
                "is_blocked_reason": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "phone": {
                    "$ref": "#/definitions/Phone"
                },
                "pin_blocked": {
                    "type": "boolean"
                },
                "role": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.Statuses"
                },
                "status_ts": {
                    "type": "integer"
                },
                "ts": {
                    "type": "integer"
                }
            }
        },
        "AdminSignUpRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "department": {
                    "type": "string"
                },
                "dob": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "CartRefillDetails": {
            "type": "object",
            "properties": {
                "cost": {
                    "type": "number"
                },
                "product_id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "Coordinates": {
            "type": "object",
            "properties": {
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "CreateNewPasswordRequest": {
            "type": "object",
            "properties": {
                "confirm_password": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "DefaultErrorResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/leetError.ErrorResponse"
                }
            }
        },
        "DefaultResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "string"
                }
            }
        },
        "DefaultSigningResponse": {
            "type": "object",
            "properties": {
                "auth_token": {
                    "type": "string"
                },
                "body": {}
            }
        },
        "EarlyAccess": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "ts": {
                    "type": "integer"
                }
            }
        },
        "Email": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                }
            }
        },
        "EmailRequestBody": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "FeeQuotationRequest": {
            "type": "object",
            "properties": {
                "cost_per_kg": {
                    "type": "number"
                },
                "cost_per_qty": {
                    "type": "number"
                },
                "product_id": {
                    "type": "string"
                }
            }
        },
        "GasRefillRequest": {
            "type": "object",
            "properties": {
                "amount_paid": {
                    "type": "number"
                },
                "guest": {
                    "type": "boolean"
                },
                "guest_bio_data": {
                    "$ref": "#/definitions/GuestBioData"
                },
                "shipping_info": {
                    "description": "This object is to be sent when the customer is done with their order and payment",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ShippingInfo"
                        }
                    ]
                }
            }
        },
        "GetCustomerOrdersRequest": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "order_status": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.OrderStatuses"
                    }
                },
                "page": {
                    "type": "integer"
                }
            }
        },
        "GetVendorProductRequest": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "product_status": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ProductStatus"
                    }
                },
                "vendor_id": {
                    "type": "string"
                }
            }
        },
        "GuestBioData": {
            "type": "object",
            "properties": {
                "device_id": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                }
            }
        },
        "InactivateCart": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "ListProductsResponse": {
            "type": "object",
            "properties": {
                "has_next_page": {
                    "type": "boolean"
                },
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Product"
                    }
                }
            }
        },
        "ListRefillFilter": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "string"
                },
                "gas_type": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ProductCategory"
                    }
                },
                "guest_email": {
                    "type": "string"
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "status": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RefillRequestStatus"
                    }
                }
            }
        },
        "OTPValidationRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                }
            }
        },
        "Order": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "string"
                },
                "delivery_fee": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "product_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.OrderStatuses"
                },
                "status_ts": {
                    "type": "integer"
                },
                "total": {
                    "type": "number"
                },
                "ts": {
                    "type": "integer"
                },
                "vat": {
                    "type": "number"
                },
                "vendor_id": {
                    "type": "string"
                }
            }
        },
        "OrderRequest": {
            "type": "object",
            "properties": {
                "product_id": {
                    "type": "string"
                }
            }
        },
        "OrderResponse": {
            "type": "object",
            "properties": {
                "customer": {
                    "$ref": "#/definitions/Admin"
                },
                "customer_id": {
                    "type": "string"
                },
                "delivery_fee": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "product_details": {
                    "$ref": "#/definitions/Product"
                },
                "product_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.OrderStatuses"
                },
                "status_ts": {
                    "type": "integer"
                },
                "total": {
                    "type": "number"
                },
                "ts": {
                    "type": "integer"
                },
                "vat": {
                    "type": "number"
                },
                "vendor_id": {
                    "type": "string"
                }
            }
        },
        "Phone": {
            "type": "object",
            "properties": {
                "number": {
                    "type": "string"
                },
                "primary": {
                    "type": "boolean"
                },
                "verified": {
                    "type": "boolean"
                }
            }
        },
        "Product": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "discount": {
                    "type": "boolean"
                },
                "discount_price": {
                    "type": "number"
                },
                "final_price": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "original_price": {
                    "type": "number"
                },
                "original_price_and_vat": {
                    "type": "number"
                },
                "parent_category": {
                    "$ref": "#/definitions/models.ProductCategory"
                },
                "status": {
                    "$ref": "#/definitions/models.ProductStatus"
                },
                "status_ts": {
                    "type": "integer"
                },
                "sub_category": {
                    "$ref": "#/definitions/models.ProductSubCategory"
                },
                "ts": {
                    "type": "integer"
                },
                "vat": {
                    "type": "number"
                },
                "vendor_id": {
                    "type": "string"
                },
                "weight": {
                    "type": "string"
                }
            }
        },
        "ReceiveGuestRequest": {
            "type": "object",
            "properties": {
                "device_id": {
                    "type": "string"
                },
                "guest": {
                    "type": "boolean"
                }
            }
        },
        "ReceiveGuestResponse": {
            "type": "object",
            "properties": {
                "device_id": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "ShippingInfo": {
            "type": "object",
            "properties": {
                "for_me": {
                    "type": "boolean"
                },
                "recipient_address": {
                    "$ref": "#/definitions/Address"
                },
                "recipient_email": {
                    "type": "string"
                },
                "recipient_name": {
                    "type": "string"
                },
                "recipient_phone": {
                    "type": "string"
                }
            }
        },
        "SigningRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "user_type": {
                    "$ref": "#/definitions/models.UserCategory"
                }
            }
        },
        "SignupRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "user_type": {
                    "$ref": "#/definitions/models.UserCategory"
                }
            }
        },
        "UpdateOrderStatusRequest": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                },
                "order_status": {
                    "$ref": "#/definitions/models.OrderStatuses"
                }
            }
        },
        "UpdateRefillRequest": {
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string"
                },
                "refill_id": {
                    "type": "string"
                },
                "request_status": {
                    "$ref": "#/definitions/models.RefillRequestStatus"
                }
            }
        },
        "domain.GasProductRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "domain.GetVendorProductsResponse": {
            "type": "object",
            "properties": {
                "has_next_page": {
                    "type": "boolean"
                },
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Product"
                    }
                }
            }
        },
        "leetError.ErrorCode": {
            "type": "integer",
            "enum": [
                1001,
                1002,
                1003,
                1004,
                1005,
                1006,
                1007,
                1008,
                1009,
                1010,
                1011,
                1012,
                1013,
                1014,
                1015,
                1016,
                1017,
                1018,
                1019,
                1020,
                1021,
                1022,
                1023,
                1024,
                1025,
                1026,
                1027,
                1028,
                1029,
                1030,
                1031,
                1032,
                1033,
                1034,
                1035
            ],
            "x-enum-varnames": [
                "DatabaseError",
                "DatabaseNoRecordError",
                "UnmarshalError",
                "MarshalError",
                "PasswordValidationError",
                "EncryptionError",
                "DecryptionError",
                "DuplicateUserError",
                "UserNotFoundError",
                "IdentityNotFoundError",
                "UserLockedError",
                "CredentialsValidationError",
                "TokenGenerationError",
                "TokenValidationError",
                "UserCategoryError",
                "EmailSendingError",
                "BusinessCategoryError",
                "StatusesError",
                "ErrorUnauthorized",
                "EmailFormatError",
                "ValidEmailHostError",
                "ValidLeetaDomainError",
                "FormParseError",
                "OrderStatusesError",
                "ProductCategoryError",
                "ProductSubCategoryError",
                "ProductStatusError",
                "ForgotPasswordError",
                "MissingUserNames",
                "InvalidUserRoleError",
                "InvalidIdentityError",
                "InvalidOTPError",
                "CartStatusesError",
                "AmountPaidError",
                "FeesStatusesError"
            ]
        },
        "leetError.ErrorResponse": {
            "type": "object",
            "properties": {
                "error_code": {
                    "$ref": "#/definitions/leetError.ErrorCode"
                },
                "error_reference": {
                    "type": "string"
                },
                "error_type": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "library.CompareOperator": {
            "type": "string",
            "enum": [
                "isEqualTo"
            ],
            "x-enum-varnames": [
                "CompareOperatorIsEqualTo"
            ]
        },
        "library.ControlType": {
            "type": "string",
            "enum": [
                "string"
            ],
            "x-enum-varnames": [
                "ControlTypeString"
            ]
        },
        "library.FilterRequest": {
            "type": "object",
            "required": [
                "operator"
            ],
            "properties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/library.RequestField"
                    }
                },
                "operator": {
                    "type": "string"
                }
            }
        },
        "library.PagingRequest": {
            "type": "object",
            "properties": {
                "index": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "library.ReadableValue-string": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "Label is the human-readable form of the value",
                    "type": "string"
                },
                "value": {
                    "description": "Value is the value for the backend",
                    "type": "string"
                }
            }
        },
        "library.RequestField": {
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "description": "Value can be a list of values or a value"
                }
            }
        },
        "library.RequestOption": {
            "type": "object",
            "properties": {
                "control": {
                    "$ref": "#/definitions/library.RequestOptionType"
                },
                "multiSelect": {
                    "type": "boolean"
                },
                "name": {
                    "$ref": "#/definitions/library.ReadableValue-string"
                },
                "operators": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "description": "Label is the human-readable form of the value",
                                "type": "string"
                            },
                            "value": {
                                "description": "Value is the value for the backend",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/library.CompareOperator"
                                    }
                                ]
                            }
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "library.RequestOptionType": {
            "type": "object",
            "properties": {
                "type": {
                    "enum": [
                        "string",
                        "float",
                        "integer",
                        "enum"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/library.ControlType"
                        }
                    ]
                }
            }
        },
        "library.ResultSelector": {
            "type": "object",
            "properties": {
                "filter": {
                    "$ref": "#/definitions/library.FilterRequest"
                },
                "paging": {
                    "$ref": "#/definitions/library.PagingRequest"
                }
            }
        },
        "models.OrderStatuses": {
            "type": "string",
            "enum": [
                "PENDING",
                "REJECTED",
                "COMPLETED",
                "APPROVED"
            ],
            "x-enum-comments": {
                "OrderApproved": "order has been approved",
                "OrderCompleted": "order has been processed and delivered, and verified by the customer",
                "OrderPending": "order has been created and processing",
                "OrderRejected": "order was rejected by vendor or customer"
            },
            "x-enum-varnames": [
                "OrderPending",
                "OrderRejected",
                "OrderCompleted",
                "OrderApproved"
            ]
        },
        "models.ProductCategory": {
            "type": "string",
            "enum": [
                "LPG",
                "LNG"
            ],
            "x-enum-varnames": [
                "LPGProductCategory",
                "LNGProductCategory"
            ]
        },
        "models.ProductStatus": {
            "type": "string",
            "enum": [
                "InStock",
                "OutOfStock"
            ],
            "x-enum-varnames": [
                "InStock",
                "OutOfStock"
            ]
        },
        "models.ProductSubCategory": {
            "type": "string",
            "enum": [
                "CYLINDER",
                "COOKER",
                "ACCESSORIES"
            ],
            "x-enum-varnames": [
                "CylinderSubCategory",
                "CookerSubCategory",
                "AccessoriesSubCategory"
            ]
        },
        "models.RefillRequestStatus": {
            "type": "string",
            "enum": [
                "cancelled",
                "accepted",
                "rejected",
                "pending",
                "fulfilled"
            ],
            "x-enum-varnames": [
                "RefillCancelled",
                "RefillAccepted",
                "RefillRejected",
                "RefillPending",
                "RefillFulFilled"
            ]
        },
        "models.Statuses": {
            "type": "string",
            "enum": [
                "SIGNEDUP",
                "REGISTERED",
                "VERIFIED",
                "ONBOARDED",
                "REJECTED",
                "EXITED",
                "LOCKED"
            ],
            "x-enum-comments": {
                "Exited": "no longer exists",
                "Locked": "currently locked for some reasons",
                "Onboarded": "now fully onboarded",
                "Registered": "filled the required information",
                "Rejected": "rejected",
                "SignedUp": "just signed up",
                "Verified": "all details verified"
            },
            "x-enum-varnames": [
                "SignedUp",
                "Registered",
                "Verified",
                "Onboarded",
                "Rejected",
                "Exited",
                "Locked"
            ]
        },
        "models.UserCategory": {
            "type": "string",
            "enum": [
                "vendor",
                "buyer",
                "admin_leeta",
                "guest"
            ],
            "x-enum-varnames": [
                "VendorCategory",
                "BuyerCategory",
                "AdminCategory",
                "GuestCatergory"
            ]
        }
    },
    "securityDefinitions": {
        "BearerToken": {
            "type": "apiKey",
            "name": "authorization",
            "in": "header"
        }
    }
}